datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  MANAGER
  APPLICANT
}

enum ApplicationResult {
  PENDING
  PASSED
  FAILED
}

enum EvaluationStatus {
  PENDING
  IN_REVIEW
  PASSED
  FAILED
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String
  role      UserRole   @default(APPLICANT)
  positions Position[]
  createdAt DateTime   @default(now())
}

model Position {
  id           String        @id @default(cuid())
  title        String
  description  String
  introText    String? // Optional introduction message
  farewellText String? // Optional farewell message
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  questions    Question[]
  applications Application[]
  createdAt    DateTime      @default(now())
}

model Question {
  id            String       @id @default(cuid())
  positionId    String
  order         Int          @default(0)
  title         String? // Optional question title
  text          String // The question text
  type          QuestionType @default(TEXT)
  options       String? // JSON array for MULTIPLE_CHOICE options
  weight        Int          @default(1) // Weight for scoring calculations
  correctOption String? // For future MULTIPLE_CHOICE auto-scoring (placeholder)
  voiceType     String? // "ai" | "video" | "text" (optional for future features)
  aiVideoUrl    String? // optional URL for AI-generated video
  uploadedMeta  String? // JSON metadata for manager-uploaded interviewer video
  position      Position     @relation(fields: [positionId], references: [id], onDelete: Cascade)
  answers       Answer[]
  createdAt     DateTime     @default(now())
}

model Application {
  id               String            @id @default(cuid())
  positionId       String
  name             String
  email            String
  resumeUrl        String?
  startedAt        DateTime          @default(now())
  completedAt      DateTime?
  status           String            @default("in_progress") // in_progress | completed
  overallResult    ApplicationResult @default(PENDING)
  totalScore       Int? // Total calculated score for evaluation
  evaluationStatus EvaluationStatus  @default(PENDING) // Evaluation status
  answers          Answer[]
  position         Position          @relation(fields: [positionId], references: [id])
}

model Answer {
  id            String      @id @default(cuid())
  applicationId String
  questionId    String
  response      String // The applicant's text response
  score         Int? // Manager-assigned or auto-calculated score
  recordedMeta  String? // Optional JSON metadata for recorded answers
  recordedUrl   String? // Optional URL for recorded content
  startedAt     DateTime?
  endedAt       DateTime?
  result        String? // Optional evaluation result
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
